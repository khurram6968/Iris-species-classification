import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score,confusion_matrix

iris_data = pd.read_csv("C:\\Users\\MKhurram\\Desktop\\Data1\\Iris.csv")

iris_data.columns
col = ['Id']
iris = iris_data.drop(col,axis=1)
np.unique(iris['Species'])

pd.crosstab(iris['Species'],columns='count',normalize=True)
sns.boxplot(x=iris['Species'],y=iris['SepalWidthCm'])

iris['Species']=iris['Species'].astype('category')
iris['Species']=iris['Species'].cat.codes
iris = iris.sample(n=150)
col_list = list(iris.columns)
features = list(set(col_list)-set(['Species']))

x = iris[features].values
x

y = iris['Species'].values
train_x, test_x, train_y, test_y = train_test_split(x,y, test_size=0.3,random_state=0)

lg = LogisticRegression()

lg.fit(train_x, train_y)

predic = lg.predict(test_x)
predic

cm = confusion_matrix(test_y, predic)
cm

accuracy_score = accuracy_score(test_y,predic)
accuracy_score

print("Misclassified value: %d"%(test_y!=predic).sum())

#############################################################################
#Here i take randomly n_neighbors = 5:
KNN Algorthim:
KNN_classifier = KNeighborsClassifier(n_neighbors=5)
KNN_classifier.fit(train_x,train_y)
pred = KNN_classifier.predict(test_x)
cm = confusion_matrix(test_y,pred)
cm
Accuracy_Score =accuracy_score(test_y,pred)
Accuracy_Score
###############################################################
#Create Algorithm to choose best value of K:
Misclassified_Sample = []
for i in range(1,20):
    knn = KNeighborsClassifier(n_neighbors=i)
    knn.fit(train_x,train_y)
    pred_i = knn.predict(test_x)
    Misclassified_Sample.append((test_y!=pred_i).sum())
print(Misclassified_Sample)
min(Misclassified_Sample)
########################################################
from sklearn.metrics import accuracy_score,confusion_matrix
#Take n_neighbors=3 beacuse there are minimum misclassified values:
##################################################
KNN_classifier = KNeighborsClassifier(n_neighbors=3)
KNN_classifier.fit(train_x,train_y)
pred = KNN_classifier.predict(test_x)
cm = confusion_matrix(test_y,pred)
cm
Accuracy_Score =accuracy_score(test_y,pred)
Accuracy_Score

